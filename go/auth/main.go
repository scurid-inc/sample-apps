package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	api "bitbucket.org/scurid/scurid-apis/pkg/grpc/auth/v1"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/metadata"
)

const (
	serverAddress = "localhost:443" // replace with your Scurid Server address and port
	//username      = "yourEmailInScuridApp@domain.com" // replace with your email address that has been created and approved in the Scurid App
	//password      = "your password"                   // replace with your password
)

/*

 */

func main() {
	// token generated by running the sample app from python/edgeAuth/main.py
	// e.g. token  := "v2.public.eyJJRCI6ImYyOTRkODBiLWI2YjQtNDNkMy05NzU2LWFlMzk3MzcwMTkzMyIsIklkZW50aXR5IjoibWV0aG9kOlwic2N1cmlkXCIgaWRlbnRpZmllcjpcIjB4OUQ0NjVGZjBhQUEwYmIyNDA2Mjc2NDNhYjNkMUYyNjVEODBhMDNDNlwiIiwiVXNlciI6eyJpZCI6ImYyOTRkODBiLWI2YjQtNDNkMy05NzU2LWFlMzk3MzcwMTkzMyJ9LCJSb2xlQW5kUGVybWlzc2lvbiI6eyJJc3N1ZWRBdCI6eyJzZWNvbmRzIjoxNzM2Njg3MDg4LCJuYW5vcyI6NTM3NDQwMDB9LCJFeHBpcmVkQXQiOnsic2Vjb25kcyI6MTczNjcxNTg4OCwibmFub3MiOjUzNzQ1MDAwfX195gizPiofiFEQZy4s7aZNOg8s752pFRV4KcobndurprOzw8-pJgs8xiI64FHPK83Cr46YlWIJyNw_t7_jK0xKBg.bnVsbA"

	// DO NOT PERSIST THIS TOKEN IN ANY FILE OR DATABASE
	tokenFromDevice := ""
	authenticateDevice(tokenFromDevice)
}

// sslCreds returns the transport credentials for the Scurid Server
func sslCreds(certData []byte) credentials.TransportCredentials {
	certPool := x509.NewCertPool()
	if !certPool.AppendCertsFromPEM(certData) {
		return nil
	}
	config := &tls.Config{RootCAs: certPool}
	return credentials.NewTLS(config)
}

// loadCACert loads the CA certificate from the file system, contact Scurid to get the certificate.
func loadCACert() ([]byte, error) {
	// Get the certificate file path relative to the current file
	certPath := filepath.Join("ca-cert.pem")

	// Read the certificate file
	certData, err := os.ReadFile(certPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read CA certificate: %v", err)
	}

	return certData, nil
}

// authenticateDevice verifies the token that is sent from the device.
func authenticateDevice(tokenFromDevice string) {
	// Load the CA certificate
	certData, err := loadCACert()
	if err != nil {
		log.Fatalf("Failed to load CA certificate: %v", err)
	}
	conn, err := grpc.Dial(serverAddress, grpc.WithTransportCredentials(sslCreds(certData)))
	if err != nil {
		panic(err)
	}
	c := api.NewAuthClient(conn)
	res, err := c.VerifyToken(apiContextWithToken(), &api.VerifyTokenReq{Token: tokenFromDevice})
	if err != nil {
		log.Fatalf("failed to verify token: %v", err)
		return
	}
	log.Println("token verified ", res.GetRes())
}

// login provides a sample implementation of a function that allows your Server application to embed Scurid Server APIs
// this is needed in order to call Scurid Server APIs
func login() string {
	// Load the CA certificate
	certData, err := loadCACert()
	if err != nil {
		log.Fatalf("Failed to load CA certificate: %v", err)
	}

	ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(30*time.Minute))
	defer cancel()
	conn, err := grpc.Dial(serverAddress, grpc.WithTransportCredentials(sslCreds(certData)))
	if err != nil {
		panic(err)
	}
	c := api.NewAuthClient(conn)
	// call to Scurid Server to get the token
	res, err := c.Login(ctx, &api.LoginReq{
		User: &api.UserStruct{
			Username: username,
		},
		Password: password,
	})
	if err != nil {
		log.Println("failed to login: ", err)
		return ""
	}
	return res.GetToken()
}

// apiContextWithToken returns a context with the token from the server
// this is needed in order to call Scurid Server APIs
func apiContextWithToken() context.Context {
	ctx := context.Background()
	tokenFromServer := login()
	return metadata.AppendToOutgoingContext(ctx, "authorization", tokenFromServer)
}
